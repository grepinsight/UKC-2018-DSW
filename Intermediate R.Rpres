Intermediate R
========================================================
author: Albert Lee
date:
autosize: true

Agenda
========================================================
1. Problem statement
2. Visualization
3. Machine Learning with Caret

```{r echo=FALSE}
library(caret)
library(tidyverse)
```

Motivation
========================================================

Here is a famous `iris` dataset.

![](assets/iris-machinelearning.png)

source: Fisher,R.A. "The use of multiple measurements in taxonomic problems"
see [here](http://archive.ics.uci.edu/ml/datasets/Iris) for more info

Exercise 1
==============

Open ./exercises/intermediate/exercise1.Rmd and let's expore iris dataset togeother.


Here's an interesting machine learning problem
==============================================

__Question: can we guess the type of species based on 4 features?__

```{r echo=FALSE}
iris %>%
  group_by(Species) %>%
  sample_n(3) %>%
  ungroup() %>%
  mutate(Species="???")
```

There are more than one ways to solve this problem, but we will use a particular way to do this....


What is caret?
==============

* It stands for  __C__lassification __A__nd __RE__gression __T__raining
* Machine learning framework in R
* Learn one workflow, leverage +100 models
* http://caret.r-forge.r-project.org/

```{r}
# type `help(package = "caret")` for more info
```

Caret consists of 4 steps
=========================

1. Partition data into train / test data
1. Model Selection and Parameter tuning
1. Prediction
1. Performance check


Training/Test Split
===================

```{r}
set.seed(123)
idx_train <- caret::createDataPartition(
  y = iris$Species,
  p = .75,
  list = FALSE
)
```

1. What does `set.seed(123)` do?
2. Read the documentation of `caret::createDataPartition`
3. what does `p=0.75` mean?
4. can you `str(idx_train)` to see its structure?

Training/Test Split
===================

```{r}
str(idx_train)
class(idx_train)
```


Training/Test Split
===================
```{r}
head(idx_train)
```

Training/Test Split Cont
===================
```{r}
data_all <- iris
data_training <- data_all[idx_train, ]
data_test <- data_all[-idx_train, ]
```

1. what am I doing here?
2. what does `-idx_train` mean?
3. can you run `dim` commands on each of the dataset?

```{r eval=FALSE}
dim(data_all)
dim(data_training)
dim(data_test)
```

Model Building
===================

1. will build a train control


```{r}
# build train control
ctrl <- caret::trainControl(
  method = "cv",
  number = 10,
  classProbs = TRUE,
  summaryFunction = caret::mnLogLoss
)
```

1. type `ctrl` on your console. What is the data structure?

```{r eval=FALSE}
ctrl
str(ctrl)
class(ctrl)
```

Model Building
===================

```{r}
model <- caret::train(
  x = data_training[,1:4],
  y = data_training$Species,
  trControl = ctrl,
  method = "rf",
  ## Center and scale the predictors for the training
  ## set and all future samples.
  preProc = c("center", "scale"),
  metric="logLoss",
  verbose=TRUE
)
```


1. what is `rf`?
2. what is `preProc`?
3. what is `metric`?

Model Building
===================

```{r}
ggplot(model)
```


Prediction
==========
```{r}
data_pred_class <- predict(model, newdata=data_test, type="raw")
data_pred_prob <- predict(model, newdata=data_test, type="prob")
```

Prediction
==========

```{r eval=FALSE}
confusionMatrix(data = data_pred_class, data_test$Species)
```

1. what is the sensitivity?
2. what is the accuracy?


Variable Importance
====================

```{r eval=FALSE}
caret::varImp(model)
```

1. What variables are important?
2. Can you confirm this with a plot?

Variable Importance
====================

```{r}
ggplot(iris, aes(x=Petal.Width, fill=Species)) + 
  geom_density() + 
  theme_bw()
```

Tips
====

```{r}
info_caret_models  <- caret::getModelInfo()
names(info_caret_models)
info_caret_models$rf$parameters
```


Regression
===========
```{r}
ctrl <- caret::trainControl(method="cv", number = 10)
model_linear <- caret::train(x = data_training[,1:3], 
             y = data_training$Petal.Width, 
             method = "lm", 
             trControl = ctrl,
             metric="RMSE")
caret::RMSE(predict(model_linear, newdata=data_test), data_test$Petal.Width)
```



Futher studies
==============

1. [Caret Documentation](https://topepo.github.io/caret/index.html)
2. [R for Data Science](http://r4ds.had.co.nz/)