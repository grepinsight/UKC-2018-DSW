Intro to R
========================================================
author: Jeho Park
date: 
autosize: true

Agenda
========================================================

- About R
- R Basics
- Working With Data
- Hands-On Project
- Further Learning

About R
========================================================

- R is a language and environment for statistical computing and graphics.
- R is used in education, finance, software, medicine and more.
- The biggest draw of using R is the large amount of functionality through packages and its graphing capabilities. However, R can have shortcomings in its speed and the learning curve for non-programmers. 

About R - Sponsors/Users
========================================================
<center>
![Sponsors of R](rsponsors.png)
</center>

R Basics
========================================================

Getting Started - RConsole
========================================================
- Upon opening RStudio, you will see the Console
  - ![RConsole](rconsole.png)

Getting Started - RConsole
========================================================
- You can perform some calculations by typing into it.
```{r}
2+2
```

Getting Started - Variables
========================================================
- You can also use variables and assign them values.
```{r}
x = 2
x+2
```
```{r}
# The "<-" operator is the same as "="
y <- x+1
x+y
```

Getting Started - R Environment
========================================================
- When you create a variable it will show up on the environment pane in RStudio
![Environment Pane](renvironment.png)

R Basics - Arithmetic Operators
========================================================
- Operators are symbols that use some input and *operate* on them.
- Arithmetic operators are our common mathematical symbols.
```{r echo='false'}
x*x # Multiplication
x/x # Division
x^3 # Exponentiation
```

R Basics - Logical Operators
========================================================
- Logical operators output either True or False
```{r}
2 < 5  # Less Than
x >= 2 # Greater Than Or Equal To
```
R Basics - Logical Operators
========================================================
```{r}
x == 1 # Equal to. NOTE: This is different from "="
x != x # Not Equal to
```

R Basics - Data Types
========================================================
- R can work with more than just numbers.
```{r}
class("hello, world!") # The class function returns the data type of a variable or value.
class(x == y) 
```

R Basics - Vectors
========================================================
- Up until now, we have been working with single numbers and variables also known as scalars.
- In R, there are also vectors which are sequences of values.
```{r}
a <- c(1,2,3)
b <- c(3,2,1)
a+b # Most operations on a vector will be element-wise
```
R Basics - Built-In Functions
========================================================
- Functions take an input and produce an output. R contains many functions that are built-in, some of which we have already seen [class(), c()]
```{r}
abs(-5) # Absolute Value
sqrt(4) # Square Root
```
R Basics - Built-In Functions - 2
========================================================
```{r}
sum(a)  # Sum
toupper("hello") # To Upper Case
```
R Basics - Built-In Functions - 3
========================================================
```{r}
sd(a) # Standard Deviation
cor(a,b) # Correlation
```

R Basics - Libraries and Packages
========================================================
- R is known for its community and its libraries/packages
- Packages are collections of R functions, data, and compiled code in a well-defined format. The directory where packages are stored is called the library.
- We will install the dplyr package, a popular package for data manipulation
- ```
install.packages('dplyr')
```
```{r}
library('dplyr')
```

R Basics - Help
========================================================
- With all these packages and functions you may forget how to use one or need to remember which one to use.
```{r}
# This will search for usage of the hist function
?hist
```

```{r}
# This will search packages and functions about histograms
??histogram
```

Exercise 1
==============

- Review of some basic R features
- Open ./exercises/intro/exercise_1.Rmd


Working with Data
========================================================

Working with Data - DataFrames
========================================================
- A data frame is used for storing data tables. It is a list of vectors of equal length.
```{r}
names <- c("John", "Kim", "Terry")
ages  <- c(21, 34, 16)
male  <- c(TRUE, FALSE, TRUE)
data.frame(names, ages, male)
```
Working with Data - DataFrames - Datasets
========================================================
- R's datasets package has some built in datasets that we will be using.
    - The CO2 data frame has 84 rows and 5 columns of data from an experiment on the cold tolerance of the grass species Echinochloa crus-galli.
```{r}
help(CO2)
```
- You can use '$' to access a vector (column/feature/etc) of a dataframe

Working with Data - Data Exploration - Head
========================================================
```{r}
# The head function shows the first few entries in a dataframe.
head(CO2)
```
Working with Data - Data Exploration - Summary
========================================================
```{r}
# The summary function shows summary statistics.
summary(CO2)
```

Working with Data - Data Visualization
========================================================
```{r}
hist(CO2$uptake) # Use help function for more plotting options
boxplot(CO2$conc)
plot(CO2$uptake, CO2$conc)
```
Working with Data - Data Visualization - Boxplot
========================================================
```{r}
boxplot(CO2$conc)
plot(CO2$uptake, CO2$conc)
```
Working with Data - Data Visualization - Scatterplot
========================================================
```{r}
plot(CO2$uptake, CO2$conc)
```
Exercise 2
==============

- Review of datasets and data visualization
- Open ./exercises/intro/exercise_2.Rmd

Working with Data - Data Manipulation
========================================================
- Dplyr is the most common package used for data exploration and transformation
- Dplyr functions: filter, select, arrange, mutate, summarise (plus group_by)
```{r}
head(filter(CO2, Treatment=='nonchilled'))
```
Working with Data - Data Manipulation - Select
========================================================
- ```select``` will output only the columns that you choose
```{r}
head(select(CO2, Plant, conc, uptake), 3)
```
Working with Data - Data Manipulation - Chaining
========================================================
- You can chain/pipe dplyr functions together
    - The infix (or pipe) operator '%>%' will feed the resulting object into the 1st paramater of the next function
```{r}
x <- select(filter(CO2, Treatment=='nonchilled'), Plant, conc, uptake) # OR
y <- CO2 %>% filter(Treatment=='nonchilled') %>% select(Plant, conc, uptake)
x == y
```

Working with Data - Data Manipulation - Arrange
========================================================
- ```arrange()``` sorts rows by a column
```{r}
# Use desc() to sort descending
CO2 %>% arrange(desc(uptake)) %>% head(3)
```

Working with Data - Data Manipulation - Mutate
========================================================
- ```mutate()``` creates new variables
```{r}
CO2 %>% mutate(conc_L = conc / 1000) %>% head()
```

Working with Data - Data Manipulation - Summarise
========================================================
- ```group_by()``` and ```summarise()``` work together to aggregate variables
```{r}
CO2 %>% group_by(Type) %>% summarise(avg_uptake = mean(uptake))
```

Working with Data - Data Manipulation - Tips
========================================================
- In datasets with a lot of columns you can select all columns but selected ones by using the '-' operator ```select(CO2, -Plant)```
- When aggregating data you need an aggregate function such as mean, median, n (number of rows in a group), sum, etc.
- If your data has missing values, you need to add the parameter ```na.rm = TRUE```, this will skip any missing values.
- When working with data, the data manipulation process often takes more time than the analysis.

Exercise 3
==============

- Review of some data manipulation functions in dplyr 
- Open ./exercises/intro/exercise_3.Rmd


Further Learning - Beginner/Intermediate
========================================================
- Beginner/Intermediate Topics
    - User Defined Functions
    - Control Structures
    - Statistical Methods
    - Data Cleaning
    - Data Visualization Libraries (ggplot2, plotly)
        - https://plot.ly/r/dashboard/
Further Learning - Advanced
========================================================
- Advanced Topics
    - Deep Learning
    - Functional Programming
    - Object Oriented Programming
    - Debugging Tools
    - Performance

Hands-On Project
========================================================

Hands-On Project
========================================================
- In this workshop we have been using the console but when working on a project you will generally use the editor so you can save your scripts. This helps anyone reproduce your findings.
- When using a script, you must run your code either all at once (Run All) or Line-by-Line

Hands-On Project - Reading the Data
========================================================
- Download the data to your computer at http://bit.ly/r-hands-on-s2018
- You can import the data to R either by code or by clicking Import Dataset on the Environment Tab
```{r}
# You need to put the full path to the file in quotes or change the working directory [getwd(), setwd()]
Births <- read.csv("Births2015.csv")
Auto   <- read.csv("Auto.csv")
```

Hands-On Project - Analysis
========================================================
1. What is the name of the 1st car in the dataset?
2. What is the total number of babies born in 2015?
3. Make a boxplot of car mpg.
4. Make a histogram of number of births.
5. How many babies are born on Wednesdays?
6. Which date had the least amount of babies born?
7. Is there a relationship between the number of cylinders and mpg? 
8. Plot the average mpg for cars of each number of cylinders?

Hands-On Project - Answers
========================================================
1. ```head(Auto,1)```: chevrolet chevelle malibu
2. ```sum(Births$births)```: 3978497
3. ```boxplot(Auto$mpg)```
4. ```hist(Births$births)```
5. ```Births %>% group_by(wday) %>% summarise(sum=sum(births)) %>% arrange(sum)```: 638513
6. ```arrange(Births, births)```: 12/25/2015
7. ```cor(Auto$mpg, Auto$cylinders)``` or ```plot(Auto$cylinders, Auto$mpg)```

Hands-On Project - Answer #8
========================================================
```{r}
x <- Auto %>% group_by(cylinders) %>% summarise(mean(mpg))
plot(x$cylinders, x$`mean(mpg)`)
```

Hands-On Project - Answer #8 - 2
========================================================
```{r}
plot(x$cylinders, x$`mean(mpg)`, type='o', xlab="Cylinders", ylab="Average MPG", main="Cylinders vs. Average MPG") # Cleaner Version
```

Resources
========================================================
- Swirl (http://swirlstats.com/)
- DataCamp (https://www.datacamp.com/courses/tech:r)
- R for Data Science by Hadley Wickham (http://r4ds.had.co.nz/) [FREE]
- Statistics.com (https://www.statistics.com/landing-page/r-courses/)
